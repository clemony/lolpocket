ðŸ§­ Nuxt SSR vs Client-only Decision Tree

1. Does the page need to be indexed by search engines or have sharable metadata?
	â€¢	Yes â†’ Use SSR/SSG.
	â€¢	No â†’ Go to step 2.

â¸»

2. Does the page need server-side data at request time (API, DB, auth)?
	â€¢	Yes â†’ Use SSR.
	â€¢	No â†’ Go to step 3.

â¸»

3. Is the content meaningful without interactivity (e.g. article, product info, docs)?
	â€¢	Yes â†’ Use SSR/SSG so users and crawlers see it immediately.
	â€¢	No â†’ Go to step 4.

â¸»

4. Is the page mostly user-driven UI (dashboards, widgets, pickers, settings)?
	â€¢	Yes â†’ Use Client-only (or keep SSR but wrap those components in <ClientOnly>).
	â€¢	No â†’ Default to SSR.

â¸»

5. Does it rely on browser-only APIs (window, localStorage, media devices)?
	â€¢	Yes â†’ Component(s) must be Client-only, even if the page is SSR.

â¸»

âœ¨ Key Takeaways
	â€¢	Default to SSR/SSG â†’ Itâ€™s safe, and you can mix in <ClientOnly> as needed.
	â€¢	Only go client-only when SSR is wasted (no SEO, no server data, UI is entirely interactive).
	â€¢	Landing pages: SSR the marketing copy, <ClientOnly> the fancy widgets.
	â€¢	Apps/dashboards: SSR the shell (nav, layout) â†’ client-only for the guts if they donâ€™t matter server-side.